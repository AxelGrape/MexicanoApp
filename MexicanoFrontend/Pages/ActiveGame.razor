@page "/activegame"
@using Mexicano.Mexicano
@using Modals
@using Services
@using System.Text.Json;
@using MexicanoFrontend.Models
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager
@inject IModalService modal
@inject IRefreshService refreshService
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage


<link rel="stylesheet" href="css/ActiveGame/StyleSheet.css">

<h3>ActiveGame</h3>

<div class="container">

	<div class="row">
		@if (CourtList != null && PlayerList != null)

			@foreach (Court court in CourtList)
			{
				{
					<div class="row padel_court">
						@if (court.GetPlayers() != null)
						{

							<div class="col">
								<div class="row ">
									<div class="col-3"></div>
									<div class="col-6"> <p class="player_name">@court.GetPlayers().ElementAt(0).Name</p></div>
									<div class="col-3"></div>

								</div>
								<div class="row team_points">
									<div class="col-3"></div>
									<div class="col-6 text-center">
										<Button class="btn btn-danger set-score-btn" @onclick="() => showSetScore(court.GetPlayers().ElementAt(0), court.GetPlayers().ElementAt(2))">@court.GetPlayers().ElementAt(0).Points</Button>
									</div>
									<div class="col-3"></div>
								</div>
								<div class="row ">
									<div class="col-3"></div>
									<div class="col-6"><p class="player_name">@court.GetPlayers().ElementAt(1).Name</p></div>
									<div class="col-3"></div>
								</div>
							</div>
							<div class="col">
								<div class="row ">
									<div class="col-3"></div>
									<div class="col-6"><p class="player_name">@court.GetPlayers().ElementAt(2).Name</p></div>
									<div class="col-3"></div>
								</div>
								<div class="row team_points">
									<div class="col-3"></div>
									<div class="col-6 text-center">
										<Button class="btn btn-danger set-score-btn" @onclick="() => showSetScore(court.GetPlayers().ElementAt(2), court.GetPlayers().ElementAt(0))">@court.GetPlayers().ElementAt(2).Points</Button>
									</div>
									<div class="col-3"></div>
								</div>
								<div class="row ">
									<div class="col-3"></div>
									<div class="col-6"><p class="player_name">@court.GetPlayers().ElementAt(3).Name</p></div>
									<div class="col-3"></div>
								</div>
							</div>
							<hr />
						}
					</div>

				}

			}
	</div>
	<div class="row">
		<button @onclick="newRound">New Round</button>
	</div>
	<div class="row">
		<Button Color="ButtonColor.Primary" @onclick="showStandings">Show Standing</Button>
	</div>

</div>

<script src="_content/Blazored.Modal/blazored.modal.js"></script>

@code {
	public List<Court>? CourtList { get; set; }
	public List<Player>? PlayerList { get; set; }

	public List<Player>? PlayerRankingList { get; set; }

	public int PointsPerGame { get; set; }

	public Player? activePlayer;
	public Player? activeEnemy;


	protected override async Task OnInitializedAsync()
	{
		await UpdateFromSessionStorage();
		AddPlayersToCourt();
	}

	protected override void OnParametersSet()
	{
		refreshService.RefreshRequested += RefreshMe;

	}

	private async void AddPlayersToCourt()
	{

		//Add 4 players to each court
		if (CourtList != null && PlayerList != null)
		{
			for (int i = 0; i < CourtList.Count; i++)
			{
				CourtList.ElementAt(i).ClearPlayers();
				for (int j = 0; j < 4; j++)
				{
					CourtList.ElementAt(i).AddPlayersToCourt(PlayerList.ElementAt(j + i * 4).CopyPlayer());
				}
			}
			PlayerRankingList = PlayerList.OrderByDescending(p => p.Points).ToList();
		}
		await SetCourtListSessionVariable(JsonSerializer.Serialize(CourtList));
	}

	public async Task UpdateFromSessionStorage()
	{
		var courtlist = sessionStorage.GetItemAsync<string>("CourtListJson");
		var playerlist = sessionStorage.GetItemAsync<string>("PlayerListJson");
		CourtList = JsonSerializer.Deserialize<List<Court>>(await courtlist);
		PlayerList = JsonSerializer.Deserialize<List<Player>>(await playerlist);

		PointsPerGame = await sessionStorage.GetItemAsync<int>("PointsPerGame");
	}
	private async Task SetSessionVariables(string playerListJson, string courtListJson)
	{
		await SetCourtListSessionVariable(courtListJson);
		await SetPlayerListSessionVariable(playerListJson);
	}
	private async Task SetCourtListSessionVariable(string courtListJson)
	{
		await sessionStorage.SetItemAsync("CourtListJson", courtListJson);
	}
	private async Task SetPlayerListSessionVariable(string playerListJson)
	{
		await sessionStorage.SetItemAsync("PlayerListJson", playerListJson);
	}

	public void setActivePlayer(Player p, Player enemy)
	{
		activePlayer = p;
		activeEnemy = enemy;
	}
	private void UpdatePlayerListPoints()
	{
		//Update the player list with the points from the court
		List<Player> newPlayerList = new List<Player>();
		foreach (Court court in CourtList!)
		{
			court.GetPlayers().ElementAt(1).Points = court.GetPlayers().ElementAt(0).Points;
			court.GetPlayers().ElementAt(3).Points = court.GetPlayers().ElementAt(2).Points;
			foreach (Player p in court.GetPlayers())
			{
				newPlayerList.Add(p);
			}
		}

		for (int i = 0; i < PlayerList!.Count; i++)
		{
			PlayerList.ElementAt(i).Points += newPlayerList.ElementAt(i).Points;
		}
	}
	public async void newRound()
	{
		UpdatePlayerListPoints();

		String playerListJson = JsonSerializer.Serialize(PlayerList);
		playerListJson = MexicanoInterface.StartNewRound(playerListJson);

		PlayerList = JsonSerializer.Deserialize<List<Player>>(playerListJson);
		await SetPlayerListSessionVariable(playerListJson);
		AddPlayersToCourt();
		RefreshMe();
		//navigationManager.NavigateTo($"/activegame");
	}

	public void showStandings()
	{
		ModalParameters parameters = new ModalParameters();
		parameters.Add("playerRankingList", JsonSerializer.Serialize(PlayerRankingList));
		modal.Show<ShowStanding>(title: "Current Standing", parameters: parameters);
	}

	public void showSetScore(Player p, Player opponent)
	{
		setActivePlayer(p, opponent);
		setScore();
	}

	public void setScore()
	{
		if (activePlayer == null || activeEnemy == null)
			return;
		GameResult gameResult = new GameResult(activePlayer, activeEnemy, PointsPerGame);
		ModalParameters parameters = new ModalParameters();
		parameters.Add("gameresult", gameResult);
		modal.Show<SetScore>(title: "Set Score", parameters: parameters);
	}

	private void RefreshMe()
	{
		StateHasChanged();
	}

}
