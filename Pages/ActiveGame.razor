@page "/activegame/{playerlist}/{courtlist}"
@using Mexicano.Mexicano
@using System.Text.Json;
@using MexicanoFrontend.Models
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager

<link rel="stylesheet" href="css/ActiveGame/StyleSheet.css">

<h3>ActiveGame</h3>

<div class="container">

    <!-- Modal -->
    <div class="modal fade" id="myModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title" id="myModalLabel">Set score</h4>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                </div>
                <div class="modal-body">
                    @for (int i = 0; i <= pointsPerGame; i++)
                    {
                        int tmp = i;
                        <button type="button" @onclick="() => UpdatePlayerScore(tmp)" class="btn btn-primary popup-score-btn" data-toggle="modal" data-target="#myModal">
                            @i
                        </button>
                    }
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        @if (CourtList != null && PlayerList != null)

            @foreach (Court court in CourtList)
            {
                {
                    <div class="row padel_court">
                        @if (court.GetPlayers() != null)
                        {

                            <div class="col">
                                <div class="row ">
                                    <div class="col-3"></div>
                                    <div class="col-6"> <p class="player_name">@court.GetPlayers().ElementAt(0).Name</p></div>
                                    <div class="col-3"></div>

                                </div>
                                <div class="row team_points">
                                    <div class="col-3"></div>
                                    <div class="col-6 text-center">
                                        <button type="button" @onclick="() => setActivePlayer(court.GetPlayers().ElementAt(0), court.GetPlayers().ElementAt(2))" class="btn btn-danger set-score-btn" data-toggle="modal" data-target="#myModal">
                                            @court.GetPlayers().ElementAt(0).Points
                                        </button>
                                    </div>
                                    <div class="col-3"></div>
                                </div>
                                <div class="row ">
                                    <div class="col-3"></div>
                                    <div class="col-6"><p class="player_name">@court.GetPlayers().ElementAt(1).Name</p></div>
                                    <div class="col-3"></div>
                                </div>
                            </div>
                            <div class="col">
                                <div class="row ">
                                    <div class="col-3"></div>
                                    <div class="col-6"><p class="player_name">@court.GetPlayers().ElementAt(2).Name</p></div>
                                    <div class="col-3"></div>
                                </div>
                                <div class="row team_points">
                                    <div class="col-3"></div>
                                    <div class="col-6 text-center">
                                        <button type="button" @onclick="() => setActivePlayer(court.GetPlayers().ElementAt(2), court.GetPlayers().ElementAt(0))" class="btn btn-danger set-score-btn" data-toggle="modal" data-target="#myModal">
                                            @court.GetPlayers().ElementAt(2).Points
                                        </button>
                                    </div>
                                    <div class="col-3"></div>
                                </div>
                                <div class="row ">
                                    <div class="col-3"></div>
                                    <div class="col-6"><p class="player_name">@court.GetPlayers().ElementAt(3).Name</p></div>
                                    <div class="col-3"></div>
                                </div>
                            </div>
                            <hr />
                        }
                    </div>

                }

            }
    </div>
    <div class="row">
        <button @onclick="newRound">New Round</button>
    </div>
    <div id="standing" class="row">
        @if (PlayerRankingList != null)
        {
            @foreach (Player p in PlayerRankingList!)
            {
                <div class="row">
                    <div class="col">
                        @p.Name
                    </div>
                    <div class="col">
                        @p.Points
                    </div>
                </div>
            }
        }
        else
        {
            <p>Something went wrong! Player ranking list is null</p>
        }

    </div>
    <div class="row">
        <button @onclick="showStandings">Show Standings</button>
    </div>

</div>


@code {
    [Parameter]
    public String playerlist { get; set; } = String.Empty;
    [Parameter]
    public String courtlist { get; set; } = String.Empty;

    public List<Court>? CourtList { get; set; }
    public List<Player>? PlayerList { get; set; }

    public List<Player>? PlayerRankingList { get; set; }


    public int pointsPerGame = 11;

    public Player? activePlayer;
    public Player? activeEnemy;



    protected override void OnParametersSet()
    {
        CourtList = JsonSerializer.Deserialize<List<Court>>(courtlist);
        PlayerList = JsonSerializer.Deserialize<List<Player>>(playerlist);

        // Add 4 players to each court
        if (CourtList != null && PlayerList != null)
        {
            for (int i = 0; i < CourtList.Count; i++)
            {
                for (int j = 0; j < 4; j++)
                {
                    CourtList.ElementAt(i).AddPlayersToCourt(PlayerList.ElementAt(j + i * 4).CopyPlayer());
                }
            }
            PlayerRankingList = PlayerList.OrderByDescending(p => p.Points).ToList();

        }

    }

    public void setActivePlayer(Player p, Player enemy)
    {
        activePlayer = p;
        activeEnemy = enemy;
    }

    public void newRound()
    {
        List<Player> newPlayerList = new List<Player>();
        foreach (Court court in CourtList!)
        {
            court.GetPlayers().ElementAt(1).Points = court.GetPlayers().ElementAt(0).Points;
            court.GetPlayers().ElementAt(3).Points = court.GetPlayers().ElementAt(2).Points;
            foreach (Player p in court.GetPlayers())
            {
                newPlayerList.Add(p);
            }

        }

        for (int i = 0; i < PlayerList!.Count; i++)
        {
            PlayerList.ElementAt(i).Points += newPlayerList.ElementAt(i).Points;
        }

        String playerListJson = JsonSerializer.Serialize(PlayerList);
        playerListJson = MexicanoInterface.StartNewRound(playerListJson);
        String courtListJson = JsonSerializer.Serialize(CourtList);
        navigationManager.NavigateTo($"/activegame/{playerListJson}/{courtListJson}");

    }

    public void UpdatePlayerScore(int score)
    {
        if (activePlayer == null || activeEnemy == null)
            return;
        if (pointsPerGame <= 0 || pointsPerGame < score)
            return;

        activePlayer.Points = score;
        activeEnemy.Points = pointsPerGame - score;
    }

    public void showStandings()
    {

    }
}
